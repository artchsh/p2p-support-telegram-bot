name: Build and Deploy to DigitalOcean

on:
  push:
    branches:
      - main  # Change if needed

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write  # Required to push to GHCR
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Log in to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      # Build the Docker image
      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.actor }}/python-app:latest .

      # Push the Docker image to GHCR
      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{ github.actor }}/python-app:latest

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-and-push  # Wait for build job to complete
    steps:
      - name: Set up SSH access to DigitalOcean
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy on DigitalOcean
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} << 'EOF'
          # Navigate to deployment directory
          cd /root/p2p-support-telegram-bot

          # Log in to GHCR and pull the latest image
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          docker pull ghcr.io/${{ github.actor }}/python-app:latest

          # Update .env file (if needed)
          cat <<EOT > .env
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          ADMIN_CHAT_ID=${{ secrets.ADMIN_CHAT_ID }}
          CHAT_ID=${{ secrets.CHAT_ID }}
          MYSQL_USER=octoberskyler
          MYSQL_ROOT_PASSWORD=kimep
          MYSQL_HOST=db
          MYSQL_DATABASE=peer2peer
          ENABLE_LOGGING=${{ secrets.ENABLE_LOGGING }}
          EOT

          # Stop old container and start new one
          docker stop python-app || true
          docker rm python-app || true

          # Run the new container
          docker run -d --restart always --name python-app -p 80:80 -p 443:443 --env-file .env ghcr.io/${{ github.actor }}/python-app:latest

          # Remove old images
          docker system prune -f
          EOF
